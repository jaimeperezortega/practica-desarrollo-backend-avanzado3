#!/usr/bin/env node
require('dotenv').config()
/**
 * Module dependencies.
 */

var app = require('../app'); //Importa nuestra aplicaci칩n de express app
var debug = require('debug')('nodepop:server');
var http = require('http');

const cluster = require('cluster');
const os = require('os');

if(cluster.isMaster) {

  console.log("Arranca el master")
  //Esto siempre se va a cumplir la 1a vez
  //Creamos N workers en funci칩n de los cores que  tenga la m치quina que estoy ejecutando

  const cores = os.cpus().length;

  for (let i = 0; i< cores; i++){
    cluster.fork() //Creamos un worker
  }

  cluster.on('listening', (worker, address)=>{
    console.log(`Worker ${worker.id} con pid (process ID) ${worker.process.pid} est치 conectado al puerto ${address.port}`);
  } )

  
  //Me suscribo al evento exit para hacer algo cuando detecta que un worker se ha caido
  cluster.on('exit', (worker, code, signal) =>{
    console.log(`Worker ${worker.id} con pid (process ID) ${worker.process.pid} ha terminado con code= ${code} y signal= ${signal}`);
    console.log("Arranco un nuevo worker");
    cluster.fork();
  })

} else {
      //Lo que va a ocurrir cuando no somos el master (cuando somos un worker)
      //arrancar  la app de formas normal
    //console.log("Arranca un worker");

    /**
     * Get port from environment and store in Express.
     */

    var port = normalizePort(process.env.PORT || '3001');
    app.set('port', port);

    /**
     * Create HTTP server.
     */

    var server = http.createServer(app);

    /**
     * Listen on provided port, on all network interfaces.
     */

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);

}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
